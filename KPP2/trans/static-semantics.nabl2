module static-semantics

imports

  signatures/-

signature

  sorts
    Void

  namespaces
    Module
    Class
    Method
    Variable
    Property
    Block
  
  name resolution
    labels P
  
  constructors
    NumberT :  Type
    StringT : Type
    ClassT : Type
    TypeT : Class -> Type
    Dynamic : Type
    FuncT : list(Type) * Type -> Type

  constraint generator
  
    [[ Expr ^ (scope) : Type ]]

rules

  init ^ (topScope) :=
    new topScope.

  [[ ModernFile(File(usings, classes)) ^ (topScope) ]] := 
    Map1 [[ classes ^ (topScope) ]].
    
  [[ LegacyFile(_) ^ (topScope) ]] := false | note "No support for legacy files".

  [[ Class(classname, definitions) ^ (topScope) ]] :=
    distinct/name D(topScope)/Class | note "Duplicate class definition" @NAMES,
  	Class { classname } <- topScope,
  	new classScope,
  	Class { classname } ===> classScope,
    classScope ---> topScope,
    Map1 [[ definitions ^ (classScope) ]].
  
  [[ Method(methodType, methodName, parameters, methodInstructions) ^ (classScope) ]] :=
    distinct/name D(classScope)/Method | note "Duplicate identifier" @NAMES,
    Method { methodName } <- classScope,
    Method { methodName } : FuncT(paramTypes, methodType),
    StripParameters[[ parameters ^ () : paramTypes ]],
    Map1 [[ methodInstructions ^ (methodScope) ]],
    new methodScope,
    methodScope ---> classScope.
  
  StripParameters [[ [] ^ () : [] ]].
  StripParameters [[ [elem | rest] ^ () : [eType | restTypes] ]] :=
  	StripParameters [[ elem ^ () : eType ]],
  	StripParameters [[ rest ^ () : restTypes ]].

  StripParameters [[ Parameter(type, _) ^ () : type ]].
    
  [[ Field(fieldType, fieldName, fieldExpr) ^ (classScope) ]] :=
    distinct/name D(classScope)/Field | note "Duplicate identifier" @NAMES,
    Field { fieldName } <- classScope,
    fieldScope -P-> classScope,
    Field { fieldName} : fieldType,
    [[ fieldExpr ^ (classScope) : exprType ]],
    [[ exprType ^ () : fieldtype ]],
    new fieldScope,
    fieldScope ---> classScope.
  
  [[ Declaration(varType, varName) ^ (methodScope) ]] :=
    distinct/name D(methodScope)/Variable | note "Duplicate identifier" @NAMES,
    Variable { varName } <- methodScope,
    Variable { varName } : varType,
    new varScope.
  
  [[ Assignment(Identifier(varName), valueExpr) ^ (methodScope) ]] :=
    Variable { varName } -> methodScope,
    Variable { varName } |-> declaration,
    declaration : declarationType,
    [[ declarationType ^ () : varType ]],
    [[ valueExpr ^ (methodScope) : varType ]].
  
  [[ DeclarationAssigned(varType, varName, valueExpr) ^ (methodScope) ]] :=
    distinct/name D(methodScope)/Variable | note "Duplicate identifier" @NAMES,
    Variable { varName } <- methodScope,
    Variable { varName } : varType,
    [[ valueExpr ^ (methodScope) : valType ]],
    [[ valType ^ () : varType ]],
    new varScope.
    
  [[ Identifier(className) ^ (methodScope) : TypeT(declaration) ]] :=
  	Class { className } -> methodScope,
    Class { className } |-> declaration.
    
  [[ Identifier(varName) ^ (methodScope) : declarationType ]] :=
  	Variable { varName } -> methodScope,
    Variable { varName } |-> declaration,
    declaration : declarationType.
  
  [[ Accessor(victim, _, propertyName) ^ (methodScope) : fieldType ]] :=
    [[ victim ^ (methodScope) : victimType ]],
    victimType == TypeT(classDeclaration),
    classDeclaration ?===> classScope,
    new accessorScope,
    accessorScope ---> classScope,
    Field { propertyName } -> accessorScope,
    Field { propertyName } |-> fieldDeclaration,
    fieldDeclaration : fieldType.
    
  [[ Accessor(victim, _, propertyName) ^ (methodScope) : methodType ]] :=
    [[ victim ^ (methodScope) : victimType ]],
    victimType == TypeT(classDeclaration),
    classDeclaration ?===> classScope,
    new accessorScope,
    accessorScope ---> classScope,
    Method { propertyName } -> accessorScope,
    Method { propertyName } |-> methodDeclaration,
    methodDeclaration : methodType.
    
  [[ Using(_) ^ (topScope) ]] := false.
  
  [[ Number(_) ^ (_) : NumberT() ]].
  [[ String(_) ^ (_) : StringT() ]].
  [[ LegacyBlock(_) ^ (_) ]].
  
  [[ NumberT() ^ () : DynamicT() ]].
  [[ StringT() ^ () : DynamicT() ]].
  [[ TypeT() ^ () : DynamicT() ]].
  [[ CustomT(_) ^ () : DynamicT() ]].
  
rules // instructions

  