module static-semantics

imports

  signatures/-
  

signature

  sorts
    Object

  namespaces
    Module
    Class
    Identifier
  
  name resolution
    labels P T
  
  constructors
    Number : Type
    String : Type
    Class : Type * scope -> Type
    Object : Class * scope -> Type
    Dynamic : Type
    Func : list(Type) * Type -> Type
    Coerce : Type -> Type
    Ref : Type -> Type
    Unit : Type
    Instruction : Type -> Type

  constraint generator
  
    [[ Expr ^ (scope) : Type ]]

rules

  init ^ (topScope) :=
    Number() <! Dynamic(),
    new topScope.

  [[ ModernFile(File(usings, classes)) ^ (topScope) ]] := 
    Type { DynamicT() } <- topScope,
    Type { DynamicT() } : Dynamic(),
    
    Type { NumberT() } <- topScope,
    Type { NumberT() } : Number(),
    Number() <! Dynamic(),
    
    Map1 [[ classes ^ (topScope) ]].
    
  [[ LegacyFile(_) ^ (topScope) ]] := false | note "No support for legacy files".

  [[ Class(className, definitions) ^ (topScope) ]] :=
    distinct/name D(topScope)/Identifier | note $[Duplicate identifier [NAME]] @NAMES,
  	new classScope,
  	classScope ---> topScope,
    new instanceScope,
    instanceScope ---> classScope,
  	
  	Identifier { className } <- topScope,
  	Identifier { className } : Class(className, classScope),
  	Identifier { "new" } <- classScope,
  	Identifier { "new" } : Func(Object(className, instanceScope), []),
  	Type { CustomT(className) } <- topScope,
  	Type { CustomT(className) } : Object(className, instanceScope),
  	
  	Object(className, instanceScope) <! Dynamic(),
  	Func(Object(className, instanceScope), []) <! Dynamic(),
  	
    Map2 [[ definitions ^ (Object(className, instanceScope), classScope) ]].
  
  [[ Method(methodType, methodName, parameters, methodInstructions) ^ (objectType, classScope) ]] :=
    distinct/name D(instanceScope)/Identifier | note $[Duplicate identifier [NAME]] @NAMES,
    objectType == Object(_, instanceScope),
    
    Identifier { methodName } <- instanceScope,
    Identifier { methodName } : Func(paramTypes, methodType),
    Identifier { "this" } <- instanceScope,
    Identifier { "this" } : objectType,
    
    StripParameters[[ parameters ^ () : paramTypes ]],
    Func(paramTypes, methodType) <! Dynamic(),

    new methodScope,
    methodScope ---> instanceScope,

    Map1 [[ methodInstructions ^ (methodScope) ]].
  
  wrapInstruction [[ any ^ () : Instruction(any) ]].
  
  StripParameters [[ [] ^ () : [] ]].
  StripParameters [[ [elem | rest] ^ () : [eType | restTypes] ]] :=
  	StripParameters [[ elem ^ () : eType ]],
  	StripParameters [[ rest ^ () : restTypes ]].

  StripParameters [[ Parameter(type, _) ^ () : type ]].
    
  [[ Field(typeLiteral, fieldName, fieldExpr) ^ (objectType, classScope) ]] :=
    distinct/name D(instanceScope)/Identifier | note $[Duplicate identifier [NAME]] @NAMES,
    objectType == Object(_, instanceScope),
    
    new fieldScope, fieldScope ---> classScope,
    [[ fieldExpr ^ (fieldScope) : exprType ]],
    
    typeLookup [[ typeLiteral ^ (fieldScope) : fieldType ]],
    exprType <? fieldType,
    
    Identifier { fieldName } <- instanceScope,
    Identifier { fieldName } : Ref(fieldType),
    Ref(fieldType) <! fieldType.
    
  
  [[ Declaration(typeLiteral, varName) ^ (methodScope) ]] :=
    distinct/name D(methodScope)/Variable | note "Duplicate identifier - foo42" @NAMES,
    Identifier { varName } <- methodScope,
    Identifier { varName } : Ref(varType),
    Ref(varType) <! varType,
    Identifier { varName } genOf varType,
    typeLookup [[ typeLiteral ^ (methodScope) : varType ]].
  
  [[ Assignment(victim, valueExpr) ^ (methodScope) ]] :=
    [[ victim ^ (methodScope) : victimType ]],
    victimType == Ref(refType) | note "Not a writable reference",
    [[ valueExpr ^ (methodScope) : valueType ]],
    valueType <? refType.
  
  [[ DeclarationAssigned(typeLiteral, varName, valueExpr) ^ (methodScope) ]] :=
    distinct/name D(methodScope)/Variable | note "Duplicate identifier" @NAMES,
    Identifier { varName } <- methodScope,
    Identifier { varName } : Ref(varType),
    [[ valueExpr ^ (methodScope) : valType ]],
    typeLookup [[ typeLiteral ^ (methodScope) : varType ]],
    valType <? varType.
  
  [[ Ref(Identifier(varName)) ^ (scope) : t ]] :=
    getProperty [[ varName ^ (scope) : t ]].
  
  [[ Identifier(varName) ^ (scope) : t ]] :=
    getProperty [[ varName ^ (scope) : t ]].
  
  [[ Accessor(victim, _, propertyName) ^ (scope) : propertyType ]] :=
    
    new s_use, s_use ---> scope,
    
    [[ victim ^ (s_use) : victimType2 ]],
    getScope [[ victimType2 ^ () : victimScope ]],
    getProperty [[ propertyName ^ (s_use) : propertyType ]].

  // TODO: check function arguments
  [[ FunctionCall(functor, _) ^ (scope) : outType ]] :=
    [[ functor ^ (scope) : Func(outType, _) ]].
 
  getProperty [[ string ^ (scope) : t ]] :=
    Identifier { string } -> scope,
    Identifier { string } |-> declaration,
    declaration : t !.
  
  getScope [[ Object(_, scope) ^ () : scope ]].
  getScope [[ Class(_, scope) ^ () : scope ]].
  
  [[ ExprInstruction(a) ^ (scope) ]] :=
  	[[ a ^ (scope) : _ ]].
   
  [[ Using(_) ^ (topScope) ]] := false.
  
  [[ LegacyBlock(_) ^ (_) ]].
  [[ Cast(typeLiteral, expr) ^ (scope) : type ]] :=
  	[[ expr ^ (scope) : _ ]],
  	typeLookup [[ typeLiteral ^ () : type ]].
  	
  [[ Add(a, b) ^ (scope) : Number() ]] :=
    [[ a ^ (scope) : aType ]],
    [[ b ^ (scope) : bType ]],
    aType <? Number(),
    bType <? Number().
  
  [[ NumberLiteral(_) ^ (_) : Number() ]].
  [[ StringLiteral(_) ^ (_) : String() ]].
  
  typeLookup [[ any ^ (s) : t ]] :=
    Type { any } -> s,
    Type { any } |-> declaration,
    declaration : t !.

rules // instructions

  